diff --git a/node_modules/protractor/node_modules/webdriver-manager/built/lib/binaries/chrome_xml.js b/node_modules/protractor/node_modules/webdriver-manager/built/lib/binaries/chrome_xml.js
old mode 100644
new mode 100755
index 6dfbea5..aada1dd
--- a/node_modules/protractor/node_modules/webdriver-manager/built/lib/binaries/chrome_xml.js
+++ b/node_modules/protractor/node_modules/webdriver-manager/built/lib/binaries/chrome_xml.js
@@ -55,14 +55,74 @@ class ChromeXml extends config_source_1.XmlConfigSource {
             return 'linux';
         }
     }
+
+    /**
+     * Based on 'https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json' platforms
+     */
+    getPlatformForDownload() {
+        const os = require('os')
+        const arch = os.arch()
+
+      console.log(os.platform(), os.arch())
+
+        switch (os.platform()) {
+          case 'darwin':
+            return arch === 'x64'? 'mac-x64' : 'mac-arm64'
+          case 'win32':
+            return arch === 'x64'? 'win64' : 'win32'
+          default:
+            return 'linux64'
+        }
+    }
+
     /**
      * Gets the latest item from the XML.
      */
     getLatestChromeDriverVersion() {
-        const latestReleaseUrl = 'https://chromedriver.storage.googleapis.com/LATEST_RELEASE';
-        return http_utils_1.requestBody(latestReleaseUrl).then(latestVersion => {
-            return this.getSpecificChromeDriverVersion(latestVersion);
-        });
+      const path = require('path')
+      const fs = require('fs')
+
+      const lastKnownGoodVersionsWithDownloads_Url = 'https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json';
+      return http_utils_1.requestBody(lastKnownGoodVersionsWithDownloads_Url).then(body => {
+        const latestVersion_Body = JSON.parse(body)['channels']['Stable']
+
+        const latestVersion = latestVersion_Body['version']
+        const platformForDownload = this.getPlatformForDownload()
+        const latestVersion_Url = latestVersion_Body['downloads']['chromedriver'].find(obj => obj['platform'] == platformForDownload)['url']
+
+        console.log("Platform", platformForDownload)
+        console.log("Latest Version", latestVersion)
+        console.log("Latest Version URL", latestVersion_Url)
+        const latestMajorVersion = latestVersion.split('.')[0]
+
+        console.log("Latest Major Version", latestMajorVersion)
+
+        const localVersion_FileName = fs.readdirSync(path.resolve(__dirname, '..', '..', '..', 'selenium'))
+          .find(f => f.startsWith(`chromedriver_${latestMajorVersion}`)) || ''
+
+
+        const localVersion = localVersion_FileName.split('_').at(-1)
+        const localVersion_Url = latestVersion_Url.replace(latestVersion, localVersion)
+
+        const localMajorVersion = localVersion.split('.')[0]
+
+        console.log("Local File Name", localVersion_FileName)
+        console.log("Local Version", localVersion)
+        console.log("Local Version Url", localVersion_Url)
+        console.log("Local Major Version", localMajorVersion)
+
+        if (latestMajorVersion == localMajorVersion) {
+          return Promise.resolve({
+            url: localVersion_Url,
+            version: localVersion,
+          })
+        } else {
+          return Promise.resolve({
+            url: latestVersion_Url,
+            version: latestVersion,
+          })
+        }
+      });
     }
     /**
      * Gets a specific item from the XML.
diff --git a/node_modules/webdriver-manager/built/lib/cmds/update.js b/node_modules/webdriver-manager/built/lib/cmds/update.js
index b98cdce..86f7709 100644
--- a/node_modules/protractor/node_modules/webdriver-manager/built/lib/cmds/update.js
+++ b/node_modules/protractor/node_modules/webdriver-manager/built/lib/cmds/update.js
@@ -16,6 +16,7 @@ const utils_1 = require("../utils");
 const Opt = require("./");
 const initialize_1 = require("./initialize");
 const opts_1 = require("./opts");
+const os = require('os')
 config_1.Config.runCommand = 'update';
 let logger = new cli_1.Logger('update');
 let prog = new cli_1.Program()
@@ -207,6 +208,26 @@ function updateBinary(binary, outputDir, proxy, ignoreSSL) {
         }
     });
 }
+
+/**
+ * Based on 'https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json' platforms
+ */
+function getPlatformForDownload() {
+  const os = require('os')
+  const arch = os.arch()
+
+  console.log(os.platform(), os.arch())
+
+  switch (os.platform()) {
+    case 'darwin':
+      return arch === 'x64'? 'mac-x64' : 'mac-arm64'
+    case 'win32':
+      return arch === 'x64'? 'win64' : 'win32'
+    default:
+      return 'linux64'
+  }
+}
+
 function unzip(binary, outputDir, fileName) {
     // remove the previously saved file and unzip it
     let osType = config_1.Config.osType();
@@ -222,8 +243,8 @@ function unzip(binary, outputDir, fileName) {
         }
     }
     // unzip the file
-    logger.info(binary.name + ': unzipping ' + fileName);
-    if (fileName.slice(-4) == '.zip') {
+  logger.info(binary.name + ': unzipping ' + fileName);
+  if (fileName.slice(-4) == '.zip') {
         try {
             let zip = new AdmZip(path.resolve(outputDir, fileName));
             zip.extractAllTo(outputDir, true);
@@ -237,7 +258,11 @@ function unzip(binary, outputDir, fileName) {
         child_process.spawnSync('tar', ['zxvf', path.resolve(outputDir, fileName), '-C', outputDir]);
     }
     // rename
+  if (fileName.indexOf('chromedriver_') != -1) {
+    fs.renameSync(path.resolve(outputDir, 'chromedriver-' + getPlatformForDownload(), binary.zipContentName()), mv)
+  } else {
     fs.renameSync(path.resolve(outputDir, binary.zipContentName()), mv);
+  }
     // set permissions
     if (osType !== 'Windows_NT') {
         logger.info(binary.name + ': setting permissions to 0755 for ' + mv);
